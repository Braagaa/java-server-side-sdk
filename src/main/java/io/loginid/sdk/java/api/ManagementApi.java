/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span>
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.api;

import com.google.gson.reflect.TypeToken;
import io.loginid.sdk.java.invokers.*;
import io.loginid.sdk.java.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class ManagementApi {
    private ApiClient apiClient;

    public ManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for manageUsersDeletePost
     *
     * @param xClientID               Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call manageUsersDeletePostCall(String xClientID, ManageUsersDeleteBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/manage/users/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientID != null)
            localVarHeaderParams.put("X-Client-ID", apiClient.parameterToString(xClientID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"serviceToken"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call manageUsersDeletePostValidateBeforeCall(String xClientID, ManageUsersDeleteBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xClientID' is set
        if (xClientID == null) {
            throw new ApiException("Missing the required parameter 'xClientID' when calling manageUsersDeletePost(Async)");
        }

        com.squareup.okhttp.Call call = manageUsersDeletePostCall(xClientID, body, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Delete a user record by username
     * **Service token scope:** &#x60;users.delete&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body      (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void manageUsersDeletePost(String xClientID, ManageUsersDeleteBody body) throws ApiException {
        manageUsersDeletePostWithHttpInfo(xClientID, body);
    }

    /**
     * Delete a user record by username
     * **Service token scope:** &#x60;users.delete&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body      (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> manageUsersDeletePostWithHttpInfo(String xClientID, ManageUsersDeleteBody body) throws ApiException {
        com.squareup.okhttp.Call call = manageUsersDeletePostValidateBeforeCall(xClientID, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a user record by username (asynchronously)
     * **Service token scope:** &#x60;users.delete&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body      (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call manageUsersDeletePostAsync(String xClientID, ManageUsersDeleteBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = manageUsersDeletePostValidateBeforeCall(xClientID, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for manageUsersPost
     *
     * @param xClientID               (required)
     * @param body                    (optional)
     * @param requestID               (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call manageUsersPostCall(String xClientID, ManageUsersBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/manage/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestID != null)
            localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));
        if (xClientID != null)
            localVarHeaderParams.put("X-Client-ID", apiClient.parameterToString(xClientID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"serviceToken"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call manageUsersPostValidateBeforeCall(String xClientID, ManageUsersBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xClientID' is set
        if (xClientID == null) {
            throw new ApiException("Missing the required parameter 'xClientID' when calling manageUsersPost(Async)");
        }

        com.squareup.okhttp.Call call = manageUsersPostCall(xClientID, body, requestID, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Create a new user without credentials
     * **Service token scope:** &#x60;users.create&#x60;
     *
     * @param xClientID (required)
     * @param body      (optional)
     * @param requestID (optional)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile manageUsersPost(String xClientID, ManageUsersBody body, UUID requestID) throws ApiException {
        ApiResponse<UserProfile> resp = manageUsersPostWithHttpInfo(xClientID, body, requestID);
        return resp.getData();
    }

    /**
     * Create a new user without credentials
     * **Service token scope:** &#x60;users.create&#x60;
     *
     * @param xClientID (required)
     * @param body      (optional)
     * @param requestID (optional)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> manageUsersPostWithHttpInfo(String xClientID, ManageUsersBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = manageUsersPostValidateBeforeCall(xClientID, body, requestID, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new user without credentials (asynchronously)
     * **Service token scope:** &#x60;users.create&#x60;
     *
     * @param xClientID (required)
     * @param body      (optional)
     * @param requestID (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call manageUsersPostAsync(String xClientID, ManageUsersBody body, UUID requestID, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = manageUsersPostValidateBeforeCall(xClientID, body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for manageUsersRetrievePost
     *
     * @param xClientID               Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body                    (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call manageUsersRetrievePostCall(String xClientID, ManageUsersRetrieveBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/manage/users/retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientID != null)
            localVarHeaderParams.put("X-Client-ID", apiClient.parameterToString(xClientID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"serviceToken"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call manageUsersRetrievePostValidateBeforeCall(String xClientID, ManageUsersRetrieveBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xClientID' is set
        if (xClientID == null) {
            throw new ApiException("Missing the required parameter 'xClientID' when calling manageUsersRetrievePost(Async)");
        }

        com.squareup.okhttp.Call call = manageUsersRetrievePostCall(xClientID, body, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Retrieve a user profile by username
     * **Service token scope:** &#x60;users.retrieve&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body      (optional)
     * @return UserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfile manageUsersRetrievePost(String xClientID, ManageUsersRetrieveBody body) throws ApiException {
        ApiResponse<UserProfile> resp = manageUsersRetrievePostWithHttpInfo(xClientID, body);
        return resp.getData();
    }

    /**
     * Retrieve a user profile by username
     * **Service token scope:** &#x60;users.retrieve&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body      (optional)
     * @return ApiResponse&lt;UserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfile> manageUsersRetrievePostWithHttpInfo(String xClientID, ManageUsersRetrieveBody body) throws ApiException {
        com.squareup.okhttp.Call call = manageUsersRetrievePostValidateBeforeCall(xClientID, body, null, null);
        Type localVarReturnType = new TypeToken<UserProfile>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a user profile by username (asynchronously)
     * **Service token scope:** &#x60;users.retrieve&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param body      (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call manageUsersRetrievePostAsync(String xClientID, ManageUsersRetrieveBody body, final ApiCallback<UserProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = manageUsersRetrievePostValidateBeforeCall(xClientID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfile>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for manageUsersUserIdActivatePut
     *
     * @param xClientID               Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId                  Unique ID of the user to be deleted. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdActivatePutCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/manage/users/{user_id}/activate"
                .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientID != null)
            localVarHeaderParams.put("X-Client-ID", apiClient.parameterToString(xClientID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"serviceToken"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call manageUsersUserIdActivatePutValidateBeforeCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xClientID' is set
        if (xClientID == null) {
            throw new ApiException("Missing the required parameter 'xClientID' when calling manageUsersUserIdActivatePut(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling manageUsersUserIdActivatePut(Async)");
        }

        com.squareup.okhttp.Call call = manageUsersUserIdActivatePutCall(xClientID, userId, progressListener, progressRequestListener);
        return call;
    }

    /**
     * Activate a user account
     * **Service token scope:** &#x60;users.activate&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User manageUsersUserIdActivatePut(String xClientID, String userId) throws ApiException {
        ApiResponse<User> resp = manageUsersUserIdActivatePutWithHttpInfo(xClientID, userId);
        return resp.getData();
    }

    /**
     * Activate a user account
     * **Service token scope:** &#x60;users.activate&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> manageUsersUserIdActivatePutWithHttpInfo(String xClientID, String userId) throws ApiException {
        com.squareup.okhttp.Call call = manageUsersUserIdActivatePutValidateBeforeCall(xClientID, userId, null, null);
        Type localVarReturnType = new TypeToken<User>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Activate a user account (asynchronously)
     * **Service token scope:** &#x60;users.activate&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdActivatePutAsync(String xClientID, String userId, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = manageUsersUserIdActivatePutValidateBeforeCall(xClientID, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for manageUsersUserIdDeactivatePut
     *
     * @param xClientID               Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId                  Unique ID of the user to be deleted. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdDeactivatePutCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/manage/users/{user_id}/deactivate"
                .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientID != null)
            localVarHeaderParams.put("X-Client-ID", apiClient.parameterToString(xClientID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"serviceToken"};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call manageUsersUserIdDeactivatePutValidateBeforeCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xClientID' is set
        if (xClientID == null) {
            throw new ApiException("Missing the required parameter 'xClientID' when calling manageUsersUserIdDeactivatePut(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling manageUsersUserIdDeactivatePut(Async)");
        }

        com.squareup.okhttp.Call call = manageUsersUserIdDeactivatePutCall(xClientID, userId, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Deactivate a user account
     * **Service token scope:** &#x60;users.deactivate&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User manageUsersUserIdDeactivatePut(String xClientID, String userId) throws ApiException {
        ApiResponse<User> resp = manageUsersUserIdDeactivatePutWithHttpInfo(xClientID, userId);
        return resp.getData();
    }

    /**
     * Deactivate a user account
     * **Service token scope:** &#x60;users.deactivate&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> manageUsersUserIdDeactivatePutWithHttpInfo(String xClientID, String userId) throws ApiException {
        com.squareup.okhttp.Call call = manageUsersUserIdDeactivatePutValidateBeforeCall(xClientID, userId, null, null);
        Type localVarReturnType = new TypeToken<User>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deactivate a user account (asynchronously)
     * **Service token scope:** &#x60;users.deactivate&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdDeactivatePutAsync(String xClientID, String userId, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = manageUsersUserIdDeactivatePutValidateBeforeCall(xClientID, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for manageUsersUserIdDelete
     *
     * @param xClientID               Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId                  Unique ID of the user to be deleted. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdDeleteCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/manage/users/{user_id}"
                .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientID != null)
            localVarHeaderParams.put("X-Client-ID", apiClient.parameterToString(xClientID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"serviceToken"};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call manageUsersUserIdDeleteValidateBeforeCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xClientID' is set
        if (xClientID == null) {
            throw new ApiException("Missing the required parameter 'xClientID' when calling manageUsersUserIdDelete(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling manageUsersUserIdDelete(Async)");
        }

        com.squareup.okhttp.Call call = manageUsersUserIdDeleteCall(xClientID, userId, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Delete a user record by user id
     * **Service token scope:** &#x60;users.delete&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void manageUsersUserIdDelete(String xClientID, String userId) throws ApiException {
        manageUsersUserIdDeleteWithHttpInfo(xClientID, userId);
    }

    /**
     * Delete a user record by user id
     * **Service token scope:** &#x60;users.delete&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> manageUsersUserIdDeleteWithHttpInfo(String xClientID, String userId) throws ApiException {
        com.squareup.okhttp.Call call = manageUsersUserIdDeleteValidateBeforeCall(xClientID, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a user record by user id (asynchronously)
     * **Service token scope:** &#x60;users.delete&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdDeleteAsync(String xClientID, String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = manageUsersUserIdDeleteValidateBeforeCall(xClientID, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for manageUsersUserIdEmailVerificationDispatchPost
     *
     * @param xClientID               Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId                  Unique ID of the user to be deleted. (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdEmailVerificationDispatchPostCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/manage/users/{user_id}/email-verification/dispatch"
                .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientID != null)
            localVarHeaderParams.put("X-Client-ID", apiClient.parameterToString(xClientID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{"serviceToken"};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call manageUsersUserIdEmailVerificationDispatchPostValidateBeforeCall(String xClientID, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xClientID' is set
        if (xClientID == null) {
            throw new ApiException("Missing the required parameter 'xClientID' when calling manageUsersUserIdEmailVerificationDispatchPost(Async)");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling manageUsersUserIdEmailVerificationDispatchPost(Async)");
        }

        com.squareup.okhttp.Call call = manageUsersUserIdEmailVerificationDispatchPostCall(xClientID, userId, progressListener, progressRequestListener);
        return call;


    }

    /**
     * Send email verificaiton request to a user
     * **Service token scope:** &#x60;users.email_verification_dispatch&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void manageUsersUserIdEmailVerificationDispatchPost(String xClientID, String userId) throws ApiException {
        manageUsersUserIdEmailVerificationDispatchPostWithHttpInfo(xClientID, userId);
    }

    /**
     * Send email verificaiton request to a user
     * **Service token scope:** &#x60;users.email_verification_dispatch&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> manageUsersUserIdEmailVerificationDispatchPostWithHttpInfo(String xClientID, String userId) throws ApiException {
        com.squareup.okhttp.Call call = manageUsersUserIdEmailVerificationDispatchPostValidateBeforeCall(xClientID, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send email verificaiton request to a user (asynchronously)
     * **Service token scope:** &#x60;users.email_verification_dispatch&#x60;
     *
     * @param xClientID Management API client ID which is created on LoginID admin dashboard. (required)
     * @param userId    Unique ID of the user to be deleted. (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call manageUsersUserIdEmailVerificationDispatchPostAsync(String xClientID, String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = manageUsersUserIdEmailVerificationDispatchPostValidateBeforeCall(xClientID, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}