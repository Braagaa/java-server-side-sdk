/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.api;

import com.google.gson.reflect.TypeToken;
import io.loginid.sdk.java.invokers.*;
import io.loginid.sdk.java.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class CodesApi {
    private ApiClient apiClient;

    public CodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CodesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for codesCodeTypeAuthorizePost
     * @param codeType Type of code to be authorized (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call codesCodeTypeAuthorizePostCall(String codeType, CodeTypeAuthorizeBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/codes/{code_type}/authorize"
            .replaceAll("\\{" + "code_type" + "\\}", apiClient.escapeString(codeType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "serviceToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call codesCodeTypeAuthorizePostValidateBeforeCall(String codeType, CodeTypeAuthorizeBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'codeType' is set
        if (codeType == null) {
            throw new ApiException("Missing the required parameter 'codeType' when calling codesCodeTypeAuthorizePost(Async)");
        }

        com.squareup.okhttp.Call call = codesCodeTypeAuthorizePostCall(codeType, body, requestID, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Authorize authentication code
     * **Service token scope:** &#x60;codes.authorize&#x60;
     * @param codeType Type of code to be authorized (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return InlineResponse2009
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2009 codesCodeTypeAuthorizePost(String codeType, CodeTypeAuthorizeBody body, UUID requestID) throws ApiException {
        ApiResponse<InlineResponse2009> resp = codesCodeTypeAuthorizePostWithHttpInfo(codeType, body, requestID);
        return resp.getData();
    }

    /**
     * Authorize authentication code
     * **Service token scope:** &#x60;codes.authorize&#x60;
     * @param codeType Type of code to be authorized (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;InlineResponse2009&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2009> codesCodeTypeAuthorizePostWithHttpInfo(String codeType, CodeTypeAuthorizeBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = codesCodeTypeAuthorizePostValidateBeforeCall(codeType, body, requestID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Authorize authentication code (asynchronously)
     * **Service token scope:** &#x60;codes.authorize&#x60;
     * @param codeType Type of code to be authorized (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call codesCodeTypeAuthorizePostAsync(String codeType, CodeTypeAuthorizeBody body, UUID requestID, final ApiCallback<InlineResponse2009> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = codesCodeTypeAuthorizePostValidateBeforeCall(codeType, body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2009>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for codesCodeTypeGeneratePost
     * @param codeType Type of code to be generated (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call codesCodeTypeGeneratePostCall(String codeType, CodeTypeGenerateBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/codes/{code_type}/generate"
            .replaceAll("\\{" + "code_type" + "\\}", apiClient.escapeString(codeType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "serviceToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call codesCodeTypeGeneratePostValidateBeforeCall(String codeType, CodeTypeGenerateBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'codeType' is set
        if (codeType == null) {
            throw new ApiException("Missing the required parameter 'codeType' when calling codesCodeTypeGeneratePost(Async)");
        }

        com.squareup.okhttp.Call call = codesCodeTypeGeneratePostCall(codeType, body, requestID, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Generate authentication code
     * **Service token scope:** &#x60;codes.generate&#x60;
     * @param codeType Type of code to be generated (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2008 codesCodeTypeGeneratePost(String codeType, CodeTypeGenerateBody body, UUID requestID) throws ApiException {
        ApiResponse<InlineResponse2008> resp = codesCodeTypeGeneratePostWithHttpInfo(codeType, body, requestID);
        return resp.getData();
    }

    /**
     * Generate authentication code
     * **Service token scope:** &#x60;codes.generate&#x60;
     * @param codeType Type of code to be generated (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2008> codesCodeTypeGeneratePostWithHttpInfo(String codeType, CodeTypeGenerateBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = codesCodeTypeGeneratePostValidateBeforeCall(codeType, body, requestID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate authentication code (asynchronously)
     * **Service token scope:** &#x60;codes.generate&#x60;
     * @param codeType Type of code to be generated (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call codesCodeTypeGeneratePostAsync(String codeType, CodeTypeGenerateBody body, UUID requestID, final ApiCallback<InlineResponse2008> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = codesCodeTypeGeneratePostValidateBeforeCall(codeType, body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for codesCodeTypeInvalidateAllPost
     * @param codeType Type of code to be denied (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call codesCodeTypeInvalidateAllPostCall(String codeType, CodeTypeInvalidateallBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/codes/{code_type}/invalidate-all"
            .replaceAll("\\{" + "code_type" + "\\}", apiClient.escapeString(codeType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requestID != null)
        localVarHeaderParams.put("Request-ID", apiClient.parameterToString(requestID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "serviceToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call codesCodeTypeInvalidateAllPostValidateBeforeCall(String codeType, CodeTypeInvalidateallBody body, UUID requestID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'codeType' is set
        if (codeType == null) {
            throw new ApiException("Missing the required parameter 'codeType' when calling codesCodeTypeInvalidateAllPost(Async)");
        }
        
        com.squareup.okhttp.Call call = codesCodeTypeInvalidateAllPostCall(codeType, body, requestID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Invalidate all authentication codes of given type and purpose for given user
     * **Service token scope:** &#x60;codes.invalidate&#x60;
     * @param codeType Type of code to be denied (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return InlineResponse20010
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20010 codesCodeTypeInvalidateAllPost(String codeType, CodeTypeInvalidateallBody body, UUID requestID) throws ApiException {
        ApiResponse<InlineResponse20010> resp = codesCodeTypeInvalidateAllPostWithHttpInfo(codeType, body, requestID);
        return resp.getData();
    }

    /**
     * Invalidate all authentication codes of given type and purpose for given user
     * **Service token scope:** &#x60;codes.invalidate&#x60;
     * @param codeType Type of code to be denied (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @return ApiResponse&lt;InlineResponse20010&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20010> codesCodeTypeInvalidateAllPostWithHttpInfo(String codeType, CodeTypeInvalidateallBody body, UUID requestID) throws ApiException {
        com.squareup.okhttp.Call call = codesCodeTypeInvalidateAllPostValidateBeforeCall(codeType, body, requestID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Invalidate all authentication codes of given type and purpose for given user (asynchronously)
     * **Service token scope:** &#x60;codes.invalidate&#x60;
     * @param codeType Type of code to be denied (required)
     * @param body  (optional)
     * @param requestID  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call codesCodeTypeInvalidateAllPostAsync(String codeType, CodeTypeInvalidateallBody body, UUID requestID, final ApiCallback<InlineResponse20010> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = codesCodeTypeInvalidateAllPostValidateBeforeCall(codeType, body, requestID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20010>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
