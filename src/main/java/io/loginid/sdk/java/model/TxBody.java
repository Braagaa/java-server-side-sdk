/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * TxBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-10T08:30:05.952Z[GMT]")
public class TxBody {
  @SerializedName("client_id")
  private String clientId = null;

  @SerializedName("tx_type")
  private String txType = null;

  @SerializedName("tx_payload")
  private String txPayload = null;

  @SerializedName("nonce")
  private String nonce = null;

  @SerializedName("username")
  private String username = null;

  public TxBody clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(description = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public TxBody txType(String txType) {
    this.txType = txType;
    return this;
  }

   /**
   * Get txType
   * @return txType
  **/
  @Schema(description = "")
  public String getTxType() {
    return txType;
  }

  public void setTxType(String txType) {
    this.txType = txType;
  }

  public TxBody txPayload(String txPayload) {
    this.txPayload = txPayload;
    return this;
  }

   /**
   * Get txPayload
   * @return txPayload
  **/
  @Schema(description = "")
  public String getTxPayload() {
    return txPayload;
  }

  public void setTxPayload(String txPayload) {
    this.txPayload = txPayload;
  }

  public TxBody nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @Schema(description = "")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }

  public TxBody username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TxBody txBody = (TxBody) o;
    return Objects.equals(this.clientId, txBody.clientId) &&
        Objects.equals(this.txType, txBody.txType) &&
        Objects.equals(this.txPayload, txBody.txPayload) &&
        Objects.equals(this.nonce, txBody.nonce) &&
        Objects.equals(this.username, txBody.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, txType, txPayload, nonce, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TxBody {\n");

    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    txType: ").append(toIndentedString(txType)).append("\n");
    sb.append("    txPayload: ").append(toIndentedString(txPayload)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
