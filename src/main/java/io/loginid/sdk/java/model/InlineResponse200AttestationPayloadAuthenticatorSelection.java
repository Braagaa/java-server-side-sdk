/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;

/**
 * InlineResponse200AttestationPayloadAuthenticatorSelection
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-10T08:30:05.952Z[GMT]")
public class InlineResponse200AttestationPayloadAuthenticatorSelection {
  /**
   * Gets or Sets authenticatorAttachment
   */
  @JsonAdapter(AuthenticatorAttachmentEnum.Adapter.class)
  public enum AuthenticatorAttachmentEnum {
    PLATFORM("platform"),
    CROSS_PLATFORM("cross-platform");

    private String value;

    AuthenticatorAttachmentEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuthenticatorAttachmentEnum fromValue(String text) {
      for (AuthenticatorAttachmentEnum b : AuthenticatorAttachmentEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuthenticatorAttachmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticatorAttachmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticatorAttachmentEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuthenticatorAttachmentEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("authenticatorAttachment")
  private AuthenticatorAttachmentEnum authenticatorAttachment = null;

  /**
   * Gets or Sets userVerification
   */
  @JsonAdapter(UserVerificationEnum.Adapter.class)
  public enum UserVerificationEnum {
    REQUIRED("required"),
    PREFERRED("preferred"),
    DISCOURAGED("discouraged");

    private String value;

    UserVerificationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static UserVerificationEnum fromValue(String text) {
      for (UserVerificationEnum b : UserVerificationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<UserVerificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserVerificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserVerificationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return UserVerificationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("userVerification")
  private UserVerificationEnum userVerification = null;

  public InlineResponse200AttestationPayloadAuthenticatorSelection authenticatorAttachment(AuthenticatorAttachmentEnum authenticatorAttachment) {
    this.authenticatorAttachment = authenticatorAttachment;
    return this;
  }

   /**
   * Get authenticatorAttachment
   * @return authenticatorAttachment
  **/
  @Schema(example = "platform", description = "")
  public AuthenticatorAttachmentEnum getAuthenticatorAttachment() {
    return authenticatorAttachment;
  }

  public void setAuthenticatorAttachment(AuthenticatorAttachmentEnum authenticatorAttachment) {
    this.authenticatorAttachment = authenticatorAttachment;
  }

  public InlineResponse200AttestationPayloadAuthenticatorSelection userVerification(UserVerificationEnum userVerification) {
    this.userVerification = userVerification;
    return this;
  }

   /**
   * Get userVerification
   * @return userVerification
  **/
  @Schema(example = "required", description = "")
  public UserVerificationEnum getUserVerification() {
    return userVerification;
  }

  public void setUserVerification(UserVerificationEnum userVerification) {
    this.userVerification = userVerification;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200AttestationPayloadAuthenticatorSelection inlineResponse200AttestationPayloadAuthenticatorSelection = (InlineResponse200AttestationPayloadAuthenticatorSelection) o;
    return Objects.equals(this.authenticatorAttachment, inlineResponse200AttestationPayloadAuthenticatorSelection.authenticatorAttachment) &&
        Objects.equals(this.userVerification, inlineResponse200AttestationPayloadAuthenticatorSelection.userVerification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticatorAttachment, userVerification);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200AttestationPayloadAuthenticatorSelection {\n");

    sb.append("    authenticatorAttachment: ").append(toIndentedString(authenticatorAttachment)).append("\n");
    sb.append("    userVerification: ").append(toIndentedString(userVerification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
