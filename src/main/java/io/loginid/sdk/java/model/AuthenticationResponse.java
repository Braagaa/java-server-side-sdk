/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * AuthenticationResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-10T08:30:05.952Z[GMT]")
public class AuthenticationResponse {
  @SerializedName("client")
  private AuthenticationResponseClient client = null;

  @SerializedName("credential")
  private AuthenticationResponseCredential credential = null;

  @SerializedName("user")
  private AuthenticationResponseUser user = null;

  @SerializedName("jwt")
  private String jwt = null;

  @SerializedName("is_authenticated")
  private Boolean isAuthenticated = null;

  public AuthenticationResponse client(AuthenticationResponseClient client) {
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @Schema(description = "")
  public AuthenticationResponseClient getClient() {
    return client;
  }

  public void setClient(AuthenticationResponseClient client) {
    this.client = client;
  }

  public AuthenticationResponse credential(AuthenticationResponseCredential credential) {
    this.credential = credential;
    return this;
  }

   /**
   * Get credential
   * @return credential
  **/
  @Schema(description = "")
  public AuthenticationResponseCredential getCredential() {
    return credential;
  }

  public void setCredential(AuthenticationResponseCredential credential) {
    this.credential = credential;
  }

  public AuthenticationResponse user(AuthenticationResponseUser user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @Schema(description = "")
  public AuthenticationResponseUser getUser() {
    return user;
  }

  public void setUser(AuthenticationResponseUser user) {
    this.user = user;
  }

  public AuthenticationResponse jwt(String jwt) {
    this.jwt = jwt;
    return this;
  }

   /**
   * Get jwt
   * @return jwt
  **/
  @Schema(description = "")
  public String getJwt() {
    return jwt;
  }

  public void setJwt(String jwt) {
    this.jwt = jwt;
  }

  public AuthenticationResponse isAuthenticated(Boolean isAuthenticated) {
    this.isAuthenticated = isAuthenticated;
    return this;
  }

   /**
   * Get isAuthenticated
   * @return isAuthenticated
  **/
  @Schema(description = "")
  public Boolean isIsAuthenticated() {
    return isAuthenticated;
  }

  public void setIsAuthenticated(Boolean isAuthenticated) {
    this.isAuthenticated = isAuthenticated;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationResponse authenticationResponse = (AuthenticationResponse) o;
    return Objects.equals(this.client, authenticationResponse.client) &&
        Objects.equals(this.credential, authenticationResponse.credential) &&
        Objects.equals(this.user, authenticationResponse.user) &&
        Objects.equals(this.jwt, authenticationResponse.jwt) &&
        Objects.equals(this.isAuthenticated, authenticationResponse.isAuthenticated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, credential, user, jwt, isAuthenticated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationResponse {\n");

    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    jwt: ").append(toIndentedString(jwt)).append("\n");
    sb.append("    isAuthenticated: ").append(toIndentedString(isAuthenticated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
