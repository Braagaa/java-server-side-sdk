/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * InlineResponse2004Payload
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-10T08:30:05.952Z[GMT]")
public class InlineResponse2004Payload {
  @SerializedName("challenge")
  private String challenge = null;

  @SerializedName("allowCredentials")
  private List<InlineResponse2004PayloadAllowCredentials> allowCredentials = null;

  @SerializedName("rp")
  private InlineResponse200AttestationPayloadRp rp = null;

  public InlineResponse2004Payload challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

   /**
   * Get challenge
   * @return challenge
  **/
  @Schema(example = "pO9V4DruYKrXClSwUn9pRIapBfFcl_l0khQd7YwqQRE", description = "")
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }

  public InlineResponse2004Payload allowCredentials(List<InlineResponse2004PayloadAllowCredentials> allowCredentials) {
    this.allowCredentials = allowCredentials;
    return this;
  }

  public InlineResponse2004Payload addAllowCredentialsItem(InlineResponse2004PayloadAllowCredentials allowCredentialsItem) {
    if (this.allowCredentials == null) {
      this.allowCredentials = new ArrayList<InlineResponse2004PayloadAllowCredentials>();
    }
    this.allowCredentials.add(allowCredentialsItem);
    return this;
  }

   /**
   * Get allowCredentials
   * @return allowCredentials
  **/
  @Schema(description = "")
  public List<InlineResponse2004PayloadAllowCredentials> getAllowCredentials() {
    return allowCredentials;
  }

  public void setAllowCredentials(List<InlineResponse2004PayloadAllowCredentials> allowCredentials) {
    this.allowCredentials = allowCredentials;
  }

  public InlineResponse2004Payload rp(InlineResponse200AttestationPayloadRp rp) {
    this.rp = rp;
    return this;
  }

   /**
   * Get rp
   * @return rp
  **/
  @Schema(description = "")
  public InlineResponse200AttestationPayloadRp getRp() {
    return rp;
  }

  public void setRp(InlineResponse200AttestationPayloadRp rp) {
    this.rp = rp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2004Payload inlineResponse2004Payload = (InlineResponse2004Payload) o;
    return Objects.equals(this.challenge, inlineResponse2004Payload.challenge) &&
        Objects.equals(this.allowCredentials, inlineResponse2004Payload.allowCredentials) &&
        Objects.equals(this.rp, inlineResponse2004Payload.rp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challenge, allowCredentials, rp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2004Payload {\n");

    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    allowCredentials: ").append(toIndentedString(allowCredentials)).append("\n");
    sb.append("    rp: ").append(toIndentedString(rp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
