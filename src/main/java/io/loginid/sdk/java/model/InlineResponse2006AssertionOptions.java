/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * InlineResponse2006AssertionOptions
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-10T08:30:05.952Z[GMT]")
public class InlineResponse2006AssertionOptions {
  @SerializedName("challenge")
  private String challenge = null;

  @SerializedName("allowCredentials")
  private List<InlineResponse2006AssertionOptionsAllowCredentials> allowCredentials = null;

  @SerializedName("rpId")
  private String rpId = null;

  public InlineResponse2006AssertionOptions challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

   /**
   * Get challenge
   * @return challenge
  **/
  @Schema(example = "pO9V4DruYKrXClSwUn9pRIapBfFcl_l0khQd7YwqQRE", description = "")
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }

  public InlineResponse2006AssertionOptions allowCredentials(List<InlineResponse2006AssertionOptionsAllowCredentials> allowCredentials) {
    this.allowCredentials = allowCredentials;
    return this;
  }

  public InlineResponse2006AssertionOptions addAllowCredentialsItem(InlineResponse2006AssertionOptionsAllowCredentials allowCredentialsItem) {
    if (this.allowCredentials == null) {
      this.allowCredentials = new ArrayList<InlineResponse2006AssertionOptionsAllowCredentials>();
    }
    this.allowCredentials.add(allowCredentialsItem);
    return this;
  }

   /**
   * Get allowCredentials
   * @return allowCredentials
  **/
  @Schema(description = "")
  public List<InlineResponse2006AssertionOptionsAllowCredentials> getAllowCredentials() {
    return allowCredentials;
  }

  public void setAllowCredentials(List<InlineResponse2006AssertionOptionsAllowCredentials> allowCredentials) {
    this.allowCredentials = allowCredentials;
  }

  public InlineResponse2006AssertionOptions rpId(String rpId) {
    this.rpId = rpId;
    return this;
  }

   /**
   * Get rpId
   * @return rpId
  **/
  @Schema(example = "localhost", description = "")
  public String getRpId() {
    return rpId;
  }

  public void setRpId(String rpId) {
    this.rpId = rpId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2006AssertionOptions inlineResponse2006AssertionOptions = (InlineResponse2006AssertionOptions) o;
    return Objects.equals(this.challenge, inlineResponse2006AssertionOptions.challenge) &&
        Objects.equals(this.allowCredentials, inlineResponse2006AssertionOptions.allowCredentials) &&
        Objects.equals(this.rpId, inlineResponse2006AssertionOptions.rpId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challenge, allowCredentials, rpId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2006AssertionOptions {\n");

    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    allowCredentials: ").append(toIndentedString(allowCredentials)).append("\n");
    sb.append("    rpId: ").append(toIndentedString(rpId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
