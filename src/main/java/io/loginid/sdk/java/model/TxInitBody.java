/*
 * LoginID Service API
 * # Introduction  <span class=\"subtext\"> Welcome to the LoginID API docs. This documentation will help understand the API calls being made behind our SDKs.  These APIs can be used to manage authentication, users, and user credentials. </span>  # Authentication  <span class=\"subtext\"> There is one main form of authentication for the API: <br/>&bull; API Service Token </span> 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.loginid.sdk.java.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * TxInitBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-06-10T08:30:05.952Z[GMT]")
public class TxInitBody {
  @SerializedName("client_id")
  private String clientId = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("nonce")
  private String nonce = null;

  @SerializedName("tx_type")
  private String txType = null;

  @SerializedName("tx_id")
  private String txId = null;

  @SerializedName("tx_payload")
  private String txPayload = null;

  public TxInitBody clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(example = "MjE4MDA4NTgtMmI0NS0xMWViLWFkYzEtMDI0MmFjMTIwMDAyLg==", description = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public TxInitBody username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(example = "john.doe", description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public TxInitBody nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @Schema(example = "PtREk2Lza7KvjHda", description = "")
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }

  public TxInitBody txType(String txType) {
    this.txType = txType;
    return this;
  }

   /**
   * Get txType
   * @return txType
  **/
  @Schema(example = "text", description = "")
  public String getTxType() {
    return txType;
  }

  public void setTxType(String txType) {
    this.txType = txType;
  }

  public TxInitBody txId(String txId) {
    this.txId = txId;
    return this;
  }

   /**
   * ID of already-created transaction; not applicable if &#x60;tx_payload&#x60; given
   * @return txId
  **/
  @Schema(example = "transaction id", description = "ID of already-created transaction; not applicable if `tx_payload` given")
  public String getTxId() {
    return txId;
  }

  public void setTxId(String txId) {
    this.txId = txId;
  }

  public TxInitBody txPayload(String txPayload) {
    this.txPayload = txPayload;
    return this;
  }

   /**
   * Payload of transaction to create; not applicable if &#x60;tx_id&#x60; given
   * @return txPayload
  **/
  @Schema(example = "transaction text to be signed", description = "Payload of transaction to create; not applicable if `tx_id` given")
  public String getTxPayload() {
    return txPayload;
  }

  public void setTxPayload(String txPayload) {
    this.txPayload = txPayload;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TxInitBody txInitBody = (TxInitBody) o;
    return Objects.equals(this.clientId, txInitBody.clientId) &&
        Objects.equals(this.username, txInitBody.username) &&
        Objects.equals(this.nonce, txInitBody.nonce) &&
        Objects.equals(this.txType, txInitBody.txType) &&
        Objects.equals(this.txId, txInitBody.txId) &&
        Objects.equals(this.txPayload, txInitBody.txPayload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, username, nonce, txType, txId, txPayload);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TxInitBody {\n");

    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    txType: ").append(toIndentedString(txType)).append("\n");
    sb.append("    txId: ").append(toIndentedString(txId)).append("\n");
    sb.append("    txPayload: ").append(toIndentedString(txPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
